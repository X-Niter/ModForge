name: Autonomous Code Scanning

on:
  schedule:
    - cron: '0 */6 * * *'  # Fallback schedule - every 6 hours
  workflow_dispatch:  # Allow manual triggering
  repository_dispatch:
    types: [autonomous-scanning]  # Triggered by the controller

# This ensures only one scanning job runs at a time
concurrency:
  group: autonomous-scanning
  cancel-in-progress: false

jobs:
  scan-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Setup Git
        run: |
          git config --global user.name "ModForge Automation"
          git config --global user.email "automation@modforge.dev"
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai requests gitpython
      
      - name: Run compilation tests
        id: compilation
        continue-on-error: true
        run: |
          # Attempt to compile the project
          ./gradlew build -x test > build_output.log 2>&1
          
          # Check build result
          if [ $? -eq 0 ]; then
            echo "compilation_success=true" >> $GITHUB_OUTPUT
            echo "No compilation errors found."
          else
            echo "compilation_success=false" >> $GITHUB_OUTPUT
            echo "Compilation errors detected:"
            grep -A 5 "error:" build_output.log || true
            grep -A 5 "FAILURE" build_output.log || true
            
            # Save error details for later
            grep -A 10 -B 2 "error:" build_output.log > compilation_errors.log || true
            grep -A 10 -B 2 "FAILURE" build_output.log >> compilation_errors.log || true
          fi
      
      - name: Run code quality checks
        id: code_quality
        continue-on-error: true
        run: |
          # Install SpotBugs and PMD
          ./gradlew spotbugsMain pmdMain > quality_output.log 2>&1
          
          # Check if any issues were found
          if grep -q "Violations found" quality_output.log; then
            echo "quality_issues=true" >> $GITHUB_OUTPUT
            echo "Code quality issues found:"
            grep -A 5 "Violations found" quality_output.log || true
            
            # Save issue details for later
            grep -A 10 -B 2 "Violations found" quality_output.log > quality_issues.log || true
          else
            echo "quality_issues=false" >> $GITHUB_OUTPUT
            echo "No code quality issues found."
          fi
      
      - name: Run AI-powered code analysis
        id: ai_analysis
        if: ${{ success() || failure() }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Create a Python script for AI analysis
          cat > analyze_code.py << 'EOF'
          import os
          import re
          import sys
          import json
          import subprocess
          from pathlib import Path
          import openai
          import random

          # Initialize OpenAI API with newer client library
          openai_api_key = os.environ.get('OPENAI_API_KEY')
          if not openai_api_key:
              print("Error: OPENAI_API_KEY not found")
              sys.exit(1)
          client = openai.OpenAI(api_key=openai_api_key)

          # Status from previous steps
          COMPILATION_SUCCESS = os.environ.get('COMPILATION_SUCCESS', 'true') == 'true'
          QUALITY_ISSUES = os.environ.get('QUALITY_ISSUES', 'false') == 'true'
          
          def load_errors():
              """Load errors from log files"""
              errors = []
              
              # Check compilation errors
              if not COMPILATION_SUCCESS and os.path.exists('compilation_errors.log'):
                  with open('compilation_errors.log', 'r') as f:
                      errors.append({
                          'type': 'compilation',
                          'details': f.read()
                      })
              
              # Check code quality issues
              if QUALITY_ISSUES and os.path.exists('quality_issues.log'):
                  with open('quality_issues.log', 'r') as f:
                      errors.append({
                          'type': 'quality',
                          'details': f.read()
                      })
                      
              return errors

          def get_recent_changes():
              """Get recent changes to understand context"""
              try:
                  result = subprocess.run(
                      ['git', 'log', '-n', '5', '--pretty=format:%s'],
                      capture_output=True, text=True, check=True
                  )
                  return result.stdout
              except:
                  return "Unable to fetch recent changes"

          def analyze_errors(errors):
              """Analyze errors using OpenAI"""
              if not errors:
                  return None
                  
              error_details = "\n\n".join([f"Error Type: {e['type']}\nDetails:\n{e['details']}" for e in errors])
              recent_changes = get_recent_changes()
              
              try:
                  response = client.chat.completions.create(
                      model="gpt-4",
                      messages=[
                          {"role": "system", "content": """You are an expert Java developer specialized in IntelliJ plugin and Minecraft mod development.
          Analyze build errors and provide a clear diagnostic with suggestions for fixes."""},
                          {"role": "user", "content": f"""Analyze these errors from an IntelliJ plugin project:
          
          # ERROR DETAILS
          {error_details}
          
          # RECENT COMMITS
          {recent_changes}
          
          Provide the following:
          1. A clear diagnosis of the root causes
          2. The specific files and code that likely need to be modified
          3. Concrete fix suggestions with code examples
          4. A summary title for the issue (50-70 chars)
          
          Format your response as a JSON object with these fields:
          - issue_title: string
          - diagnosis: string
          - affected_files: string[]
          - suggested_fixes: object[] (each with 'file', 'problem', and 'fix' fields)
          - summary: string
          """}
                      ],
                      temperature=0.2,
                      response_format={"type": "json_object"}
                  )
                  
                  return json.loads(response.choices[0].message.content)
              except Exception as e:
                  print(f"Error analyzing with OpenAI: {str(e)}")
                  return {
                      "issue_title": "Build error requires investigation",
                      "diagnosis": f"Failed to analyze errors: {str(e)}. See logs for details.",
                      "affected_files": [],
                      "suggested_fixes": [],
                      "summary": "System encountered errors that require manual review."
                  }

          def analyze_codebase_for_improvements():
              """Proactively analyze the codebase for improvements"""
              # Get a list of Java files
              java_files = []
              for root, _, files in os.walk('.'):
                  if any(skip in root for skip in ['/build/', '/.git/', '/.github/']):
                      continue
                  for file in files:
                      if file.endswith('.java'):
                          java_files.append(os.path.join(root, file))
              
              # Select a random sample of files to analyze
              if not java_files:
                  return None
                  
              sample_size = min(5, len(java_files))
              sample_files = random.sample(java_files, sample_size)
              
              # Analyze file contents
              file_contents = {}
              for file_path in sample_files:
                  with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                      file_contents[file_path] = f.read()
              
              try:
                  prompts = []
                  for file_path, content in file_contents.items():
                      prompts.append(f"File: {file_path}\n\n```java\n{content[:4000]}\n```")
                      
                  combined_prompt = "\n\n".join(prompts)
                  
                  response = client.chat.completions.create(
                      model="gpt-4",
                      messages=[
                          {"role": "system", "content": """You are an expert Java developer specialized in IntelliJ plugin and Minecraft mod development.
          Analyze code for possible improvements, even when there are no obvious errors."""},
                          {"role": "user", "content": f"""Analyze these Java files from an IntelliJ plugin project for potential improvements:
          
          {combined_prompt}
          
          Identify 3-5 high-value improvements, focusing on:
          1. Code architecture and structure
          2. Performance optimization
          3. Best practices specific to IntelliJ plugin development
          4. Documentation improvements
          5. Maintainability enhancements
          
          Format your response as a JSON object with these fields:
          - issue_title: string (meaningful title for the improvement proposal)
          - improvements: object[] (each with 'file', 'description', 'suggestion', and 'priority' fields)
          - summary: string (concise overview of proposed improvements)
          """}
                      ],
                      temperature=0.2,
                      response_format={"type": "json_object"}
                  )
                  
                  return json.loads(response.choices[0].message.content)
              except Exception as e:
                  print(f"Error analyzing for improvements: {str(e)}")
                  return None

          def main():
              # Load errors from previous steps
              errors = load_errors()
              
              # Analyze errors if any
              if errors:
                  analysis = analyze_errors(errors)
                  if analysis:
                      with open('error_analysis.json', 'w') as f:
                          json.dump(analysis, f)
                      print("Error analysis completed and saved.")
                      return
              
              # If no errors, look for improvements
              improvements = analyze_codebase_for_improvements()
              if improvements:
                  with open('improvement_suggestions.json', 'w') as f:
                      json.dump(improvements, f)
                  print("Improvement analysis completed and saved.")
              else:
                  print("No improvement opportunities identified.")
          
          if __name__ == "__main__":
              main()
EOF

          # Run the analysis
          export COMPILATION_SUCCESS=${{ steps.compilation.outputs.compilation_success }}
          export QUALITY_ISSUES=${{ steps.code_quality.outputs.quality_issues }}
          python analyze_code.py
          
          # Check if analysis was generated
          if [ -f "error_analysis.json" ]; then
            echo "error_analysis_exists=true" >> $GITHUB_OUTPUT
          else
            echo "error_analysis_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -f "improvement_suggestions.json" ]; then
            echo "improvements_exist=true" >> $GITHUB_OUTPUT
          else
            echo "improvements_exist=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Process errors and create issue
        if: steps.compilation.outputs.compilation_success == 'false' || steps.code_quality.outputs.quality_issues == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a Python script to process errors and create an issue
          cat > create_error_issue.py << 'EOF'
          import os
          import json
          import requests
          import subprocess
          import random
          
          # GitHub API setup
          github_token = os.environ.get('GITHUB_TOKEN')
          if not github_token:
              print("Error: GITHUB_TOKEN not found")
              exit(1)

          repo = os.environ.get('GITHUB_REPOSITORY')
          api_url = f"https://api.github.com/repos/{repo}"
          headers = {
              'Authorization': f'token {github_token}',
              'Accept': 'application/vnd.github.v3+json'
          }
          
          def load_analysis():
              """Load error analysis from file"""
              if not os.path.exists('error_analysis.json'):
                  return None
                  
              with open('error_analysis.json', 'r') as f:
                  return json.load(f)

          def create_branch_with_fixes(analysis):
              """Create a branch with proposed fixes"""
              try:
                  # Create a branch name
                  run_id = os.environ.get('GITHUB_RUN_ID', '')
                  branch_name = f"auto-fix-{run_id}-{random.randint(1000, 9999)}"
                  
                  # Create and checkout branch
                  subprocess.run(['git', 'checkout', '-b', branch_name], check=True)
                  
                  # Apply fixes
                  files_changed = []
                  for fix in analysis.get('suggested_fixes', []):
                      file_path = fix.get('file')
                      if not file_path or not os.path.exists(file_path):
                          continue
                          
                      # Read the file
                      with open(file_path, 'r', encoding='utf-8') as f:
                          content = f.read()
                          
                      # Apply the fix (this is a simplified approach)
                      # A more robust approach would use regex or AST parsing
                      # to make precise changes
                      problem = fix.get('problem', '')
                      solution = fix.get('fix', '')
                      
                      if problem and solution and problem in content:
                          new_content = content.replace(problem, solution)
                          with open(file_path, 'w', encoding='utf-8') as f:
                              f.write(new_content)
                              
                          subprocess.run(['git', 'add', file_path], check=True)
                          files_changed.append(file_path)
                  
                  # If we made changes, commit and push
                  if files_changed:
                      commit_msg = f"Auto-fix: {analysis.get('issue_title', 'Build errors')}"
                      subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
                      subprocess.run(['git', 'push', 'origin', branch_name], check=True)
                      return branch_name, files_changed
                      
                  return None, []
              except Exception as e:
                  print(f"Error creating branch with fixes: {str(e)}")
                  return None, []

          def create_issue_with_analysis(analysis, branch_name=None, files_changed=None):
              """Create a GitHub issue with error analysis"""
              if not analysis:
                  print("No analysis data available")
                  return
                  
              # Construct the issue body
              body = f"""# {analysis.get('issue_title', 'Build Error Analysis')}
          
          ## Diagnosis
          {analysis.get('diagnosis', 'No diagnosis available')}
          
          ## Affected Files
          {chr(10).join(['- ' + f for f in analysis.get('affected_files', [])])}
          
          ## Suggested Fixes
          """
          
              for fix in analysis.get('suggested_fixes', []):
                  body += f"""
          ### Problem in `{fix.get('file', 'Unknown file')}`
          {fix.get('problem', 'No problem description')}
          
          ### Suggested Fix
          ```java
          {fix.get('fix', 'No fix available')}
          ```
          """
          
              if branch_name and files_changed:
                  body += f"""
          ## Automated Fix
          ModForge AI has created a pull request with suggested fixes in branch `{branch_name}`.
          
          Files modified:
          {chr(10).join(['- ' + f for f in files_changed])}
          
          Please review these changes before merging.
          """
          
              body += """
          ## Next Steps
          1. Review the suggested fixes
          2. Apply the fixes manually or use the automated pull request
          3. Respond to this issue with any questions or if you need further assistance
          
          _This issue was automatically created by the ModForge Autonomous System_
          """
          
              # Create the issue
              issue_data = {
                  'title': analysis.get('issue_title', 'Build Error Detected'),
                  'body': body,
                  'labels': ['automated', 'bug', 'build-error']
              }
              
              response = requests.post(f"{api_url}/issues", headers=headers, json=issue_data)
              
              if response.status_code == 201:
                  print(f"Issue created successfully: {response.json().get('html_url')}")
                  issue_number = response.json().get('number')
                  
                  # If we have a branch with fixes, create a PR
                  if branch_name and files_changed:
                      create_pr_for_fixes(branch_name, analysis, issue_number)
              else:
                  print(f"Error creating issue: {response.status_code}")
                  print(response.text)

          def create_pr_for_fixes(branch_name, analysis, issue_number):
              """Create a pull request with the fixes"""
              pr_data = {
                  'title': f"Auto-fix: {analysis.get('issue_title', 'Build errors')}",
                  'body': f"""This PR was automatically created by ModForge AI to fix build errors.
          
          ## Changes Made
          {analysis.get('summary', 'Fixes for build errors')}
          
          ## Related Issue
          Fixes #{issue_number}
          
          Please review these changes carefully before merging.
          
          _This PR was automatically created by the ModForge Autonomous System_
          """,
                  'head': branch_name,
                  'base': 'main',
                  'maintainer_can_modify': True
              }
              
              response = requests.post(f"{api_url}/pulls", headers=headers, json=pr_data)
              
              if response.status_code == 201:
                  print(f"PR created successfully: {response.json().get('html_url')}")
              else:
                  print(f"Error creating PR: {response.status_code}")
                  print(response.text)

          def main():
              # Load error analysis
              analysis = load_analysis()
              
              if not analysis:
                  print("No error analysis found")
                  return
              
              # Create a branch with fixes
              branch_name, files_changed = create_branch_with_fixes(analysis)
              
              # Create an issue with the analysis
              create_issue_with_analysis(analysis, branch_name, files_changed)
          
          if __name__ == "__main__":
              main()
EOF

          # Run the script to create an issue
          python create_error_issue.py
      
      - name: Process improvement suggestions
        if: steps.compilation.outputs.compilation_success == 'true' && steps.ai_analysis.outputs.improvements_exist == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a Python script to process improvement suggestions
          cat > create_improvement_issue.py << 'EOF'
          import os
          import json
          import requests
          
          # GitHub API setup
          github_token = os.environ.get('GITHUB_TOKEN')
          if not github_token:
              print("Error: GITHUB_TOKEN not found")
              exit(1)
          
          repo = os.environ.get('GITHUB_REPOSITORY')
          api_url = f"https://api.github.com/repos/{repo}"
          headers = {
              'Authorization': f'token {github_token}',
              'Accept': 'application/vnd.github.v3+json'
          }

          def load_suggestions():
              """Load improvement suggestions from file"""
              if not os.path.exists('improvement_suggestions.json'):
                  return None
                  
              with open('improvement_suggestions.json', 'r') as f:
                  return json.load(f)
          
          def create_issue_with_suggestions(suggestions):
              """Create a GitHub issue with improvement suggestions"""
              if not suggestions:
                  print("No improvement suggestions available")
                  return
                  
              # Construct the issue body
              body = f"""# {suggestions.get('issue_title', 'Code Improvement Suggestions')}
          
          ## Overview
          {suggestions.get('summary', 'No summary available')}
          
          ## Suggested Improvements
          """
          
              for improvement in suggestions.get('improvements', []):
                  body += f"""
          ### {improvement.get('file', 'General Improvement')} (Priority: {improvement.get('priority', 'Medium')})
          **Description**: {improvement.get('description', 'No description')}
          
          **Suggestion**:
          ```
          {improvement.get('suggestion', 'No specific suggestion')}
          ```
          
          """
          
              body += """
          ## Next Steps
          1. Review these suggestions
          2. Implement any improvements you agree with
          3. Respond to this issue if you need clarification or have questions
          
          ModForge AI can implement any of these improvements if you approve. Just comment with:
          - `/implement all` to apply all suggestions
          - `/implement 1,3` to apply only specific numbered suggestions
          - `/explain 2` to get more details about a specific suggestion
          
          _This issue was automatically created by the ModForge Autonomous System_
          """
          
              # Create the issue
              issue_data = {
                  'title': suggestions.get('issue_title', 'Code Improvement Suggestions'),
                  'body': body,
                  'labels': ['automated', 'enhancement', 'code-quality']
              }
              
              response = requests.post(f"{api_url}/issues", headers=headers, json=issue_data)
              
              if response.status_code == 201:
                  print(f"Issue created successfully: {response.json().get('html_url')}")
              else:
                  print(f"Error creating issue: {response.status_code}")
                  print(response.text)

          def main():
              # Load improvement suggestions
              suggestions = load_suggestions()
              
              if not suggestions:
                  print("No improvement suggestions found")
                  return
              
              # Create an issue with the suggestions
              create_issue_with_suggestions(suggestions)
          
          if __name__ == "__main__":
              main()
EOF

          # Run the script to create an issue
          python create_improvement_issue.py
      
      - name: Report Success
        if: steps.compilation.outputs.compilation_success == 'true' && steps.code_quality.outputs.quality_issues == 'false' && steps.ai_analysis.outputs.improvements_exist == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create an issue asking for guidance
          cat > python_create_guidance_issue.py << 'EOF'
import os
import json
import requests
import random

# GitHub API setup
github_token = os.environ.get('GITHUB_TOKEN')
repo = os.environ.get('GITHUB_REPOSITORY')
api_url = f"https://api.github.com/repos/{repo}"
headers = {
    'Authorization': f'token {github_token}',
    'Accept': 'application/vnd.github.v3+json'
}

def get_recent_activity():
    """Get information about recent activity in the repo"""
    try:
        # Get recent commits
        response = requests.get(f"{api_url}/commits?per_page=5", headers=headers)
        commits = response.json() if response.status_code == 200 else []
        
        # Get recent issues
        response = requests.get(f"{api_url}/issues?state=all&per_page=5", headers=headers)
        issues = response.json() if response.status_code == 200 else []
        
        # Get recent PRs
        response = requests.get(f"{api_url}/pulls?state=all&per_page=5", headers=headers)
        prs = response.json() if response.status_code == 200 else []
        
        return {
            'commits': [{'sha': c.get('sha')[:7], 'message': c.get('commit', {}).get('message', '').split('\n')[0]} for c in commits],
            'issues': [{'number': i.get('number'), 'title': i.get('title')} for i in issues],
            'prs': [{'number': p.get('number'), 'title': p.get('title')} for p in prs]
        }
    except Exception as e:
        print(f"Error getting recent activity: {str(e)}")
        return {'commits': [], 'issues': [], 'prs': []}

def main():
    # Get recent activity
    activity = get_recent_activity()
    
    # Create a list of potential improvement ideas
    ideas = [
        "Add more unit tests to improve code coverage",
        "Implement additional performance optimizations",
        "Enhance documentation with more detailed examples",
        "Improve error handling and user feedback",
        "Add new features to expand functionality",
        "Refactor code to increase maintainability",
        "Optimize memory usage in critical components"
    ]
    
    # Randomly select a few ideas
    selected_ideas = random.sample(ideas, min(3, len(ideas)))
    
    # Construct issue title and body
    issue_title = "Status Update: All Tests Passing - What Next?"
    
    issue_body = """# Status Update: All Tests Passing

## System Status
✅ **Compilation**: Successful
✅ **Code Quality**: No issues detected
✅ **AI Analysis**: No critical improvements identified

## Recent Activity
"""

    # Add recent commits
    issue_body += "\n### Recent Commits\n"
    for commit in activity.get('commits', []):
        issue_body += f"- `{commit.get('sha')}`: {commit.get('message')}\n"
    
    # Add recent issues/PRs
    issue_body += "\n### Recent Issues & PRs\n"
    for issue in activity.get('issues', []):
        issue_body += f"- #{issue.get('number')}: {issue.get('title')}\n"
    
    # Add suggestions section
    issue_body += """
## What Next?
The autonomous system has completed its scan and found no immediate issues to address. 
Here are some potential areas for improvement:

"""
    for i, idea in enumerate(selected_ideas, 1):
        issue_body += f"{i}. {idea}\n"

    issue_body += """
## Request for Guidance
Would you like the system to focus on any specific areas? You can:

1. **Request a deep dive**: `/analyze [component]` (e.g., `/analyze ui components`)
2. **Request a new feature**: `/add feature [description]`
3. **Request code refactoring**: `/refactor [target]`
4. **Request documentation improvements**: `/document [topic]`

Or simply respond with your own instructions for what to work on next.

_This status update was automatically created by the ModForge Autonomous System_
"""

    # Create the issue
    issue_data = {
        'title': issue_title,
        'body': issue_body,
        'labels': ['status-update', 'automated', 'guidance-needed']
    }
    
    response = requests.post(f"{api_url}/issues", headers=headers, json=issue_data)
    
    if response.status_code == 201:
        print(f"Status update issue created successfully: {response.json().get('html_url')}")
    else:
        print(f"Error creating status update issue: {response.status_code}")
        print(response.text)

if __name__ == "__main__":
    main()
EOF

          # Create the status update issue
          python python_create_guidance_issue.py