name: GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Weekly update on Sunday at midnight

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  collect-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for better metrics
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai pyyaml markdown
          
      - name: Generate project metrics
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python .github/scripts/generate_metrics.py
        
      - name: Collect GitHub workflow statistics
        run: |
          # Get statistics for GitHub Actions workflows
          mkdir -p docs/src/data/workflows
          
          # Get list of workflows
          gh api repos/$GITHUB_REPOSITORY/actions/workflows | jq '.workflows[] | {name: .name, id: .id, state: .state, path: .path}' > docs/src/data/workflows/workflow_list.json
          
          # For each workflow, get recent runs
          cat docs/src/data/workflows/workflow_list.json | jq -r '.id' | while read -r workflow_id; do
            gh api repos/$GITHUB_REPOSITORY/actions/workflows/$workflow_id/runs?per_page=10 > docs/src/data/workflows/workflow_${workflow_id}_runs.json
          done
          
          # Compile autonomous system statistics
          python .github/scripts/compile_automation_stats.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload metrics
        uses: actions/upload-artifact@v3
        with:
          name: metrics-data
          path: docs/src/data/
          
  build:
    runs-on: ubuntu-latest
    needs: collect-stats
    steps:
      - name: Checkout
        uses: actions/checkout@v3
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Download metrics
        uses: actions/download-artifact@v3
        with:
          name: metrics-data
          path: docs/src/data/
          
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install Node dependencies
        run: |
          cd docs
          npm install
          
      - name: Build site
        run: |
          cd docs
          npm run build
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './docs/build'
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        
  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Create status issue comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Find the most recent open issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 5
            });
            
            // Find the first issue that's related to development status
            const statusIssues = issues.data.filter(issue => 
              issue.title.toLowerCase().includes('status') || 
              issue.title.toLowerCase().includes('progress') ||
              issue.title.toLowerCase().includes('development')
            );
            
            if (statusIssues.length > 0) {
              // Add dashboard link comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: statusIssues[0].number,
                body: `## Dashboard Updated ðŸ“Š\n\nThe ModForge development dashboard has been updated with the latest metrics and project status.\n\nView it at: https://${context.repo.owner}.github.io/${context.repo.repo}/\n\n_This comment was automatically added by the ModForge autonomous system._`
              });
            }