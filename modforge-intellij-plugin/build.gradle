plugins {
    id 'java'
    // Use JetBrains' new IntelliJ Platform Gradle plugin instead
    id 'org.jetbrains.intellij' version '1.17.2'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0' apply false // For Kotlin support
}

group 'com.modforge'
version '2.1.0'

repositories {
    mavenCentral()
    maven { 
        url 'https://www.jetbrains.com/intellij-repository/releases'
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven { 
        url 'https://cache-redirector.jetbrains.com/intellij-dependencies'
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://download.jetbrains.com/teamcity-repository' }
}

dependencies {
    implementation 'org.kohsuke:github-api:1.321'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'org.zeroturnaround:zt-zip:1.16'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.10.0'
}

// Configure Gradle IntelliJ Plugin
intellij {
    // IMPORTANT: Best practice for targeting IntelliJ IDEA 2025.1.1.1
    // - Use stable 2023.3.6 for build compatibility
    // - Set XML compatibility for 251.25410.129
    // - Use localPath for direct 2025.1.1.1 testing
    
    // Target version approach depends on your needs:
    // Option 1: Repository build (easier, more compatible, recommended for CI)
    version = '2023.3.6' 
    type = 'IC' // Community Edition
    
    // Alternative Option: Local build for exact version testing
    // - Comment out the version line above
    // - Uncomment the localPath line below with your IntelliJ path
    // localPath = 'C:/Program Files/JetBrains/IntelliJ IDEA Community Edition 2025.1.1.1'
    
    // Essential configuration
    downloadSources = true
    updateSinceUntilBuild = false
    pluginDependencyCaching = false
    
    // Use only essential plugins - make GitHub/etc optional with fallbacks
    plugins = ['java']
    
    // Access multiple repositories for better dependency resolution
    intellijRepository = 'https://www.jetbrains.com/intellij-repository/releases'
    
    // This is duplicated in the comment above - can be removed
}

// Configure Java sourceSets - using standard Gradle setup
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Set Java compatibility version to match IntelliJ IDEA 2025.1 runtime
java {
    sourceCompatibility = JavaVersion.VERSION_21 // IntelliJ 2025.1 uses Java 21
    targetCompatibility = JavaVersion.VERSION_21 // IntelliJ 2025.1 uses Java 21
}

// Ensure gradlew works on all environments
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.ALL
}

// Additional IntelliJ plugin configuration
tasks {
    // Set compatibility specifically for IntelliJ IDEA 2025.1.1.1 (Build: 251.25410.129)
    patchPluginXml {
        sinceBuild.set("233") // Support from 2023.3
        untilBuild.set("251.*") // Support all 2025.1.x versions
        changeNotes.set("""
            <h2>Version 2.1.0 - May 11, 2025</h2>
            <ul>
                <li><b>Added:</b> Full compatibility with IntelliJ IDEA 2025.1.1.1 (Build: 251.25410.129)</li>
                <li><b>Added:</b> Java 21 virtual thread optimization</li>
                <li><b>Added:</b> Environment validation and compatibility checking</li>
                <li><b>Added:</b> Improved error handling and recovery mechanisms</li>
                <li><b>Added:</b> Optional plugin dependencies with fallbacks for better compatibility</li>
                <li><b>Updated:</b> GitHub workflow generation to use JDK 21</li>
                <li><b>Updated:</b> Connection utilities to use modern retry logic</li>
                <li><b>Fixed:</b> Multiple compatibility issues with IntelliJ IDEA 2025.1.1.1</li>
                <li><b>Improved:</b> Plugin activation and IDE integration</li>
                <li><b>Improved:</b> Build system with specific version targeting</li>
            </ul>
        """)
    }
    
    // Verify plugin structure before building
    verifyPlugin {
        ignoreWarnings.set(true) // Set to false for stricter validation
    }

    runIde {
        jvmArgs = [
            '-Xmx2g',
            '--add-opens=java.base/java.util=ALL-UNNAMED',
            '--add-opens=java.base/java.lang=ALL-UNNAMED'
        ]
    }

    // JUnit 5 integration
    test {
        useJUnitPlatform()
    }

    // Generate JAR with sources for debugging
    jar {
        from sourceSets.main.allSource
        manifest {
            attributes(
                'Implementation-Title': 'ModForge IntelliJ Plugin',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')} ${System.getProperty('java.vm.version')})",
                'Build-OS': "${System.getProperty('os.name')} ${System.getProperty('os.arch')} ${System.getProperty('os.version')}"
            )
        }
    }
}

// Add verification tasks
tasks.register('validatePluginForProduction') {
    group = 'verification'
    description = 'Validates that the plugin is ready for production deployment'

    doLast {
        println "Validating plugin for production deployment..."
        
        // Check Java version
        def javaVersion = System.getProperty('java.version')
        def javaVersionMajor = javaVersion.split('\\.')[0].toInteger()
        if (javaVersionMajor < 21) {
            throw new GradleException("Invalid Java version: $javaVersion. Java 21 or higher is required.")
        }
        println "✓ Java version check passed: $javaVersion"
        
        // Check plugin version
        if (version == '1.0-SNAPSHOT') {
            throw new GradleException("Plugin version is still set to development snapshot. Set a proper release version.")
        }
        println "✓ Plugin version check passed: $version"
        
        // Validate build number format
        def untilBuild = tasks.patchPluginXml.untilBuild.get()
        if (!untilBuild.matches(/^\d+\.\d+\.\d+\.\d+$/) && !untilBuild.endsWith(".*")) {
            throw new GradleException("untilBuild should either be a specific build number (e.g., 251.25410.129) or end with '.*' to support minor IDE updates")
        }
        println "✓ Plugin build range check passed: ${tasks.patchPluginXml.sinceBuild.get()} - ${tasks.patchPluginXml.untilBuild.get()}"
        
        println "✓ Plugin validation completed successfully"
    }
}

// Link validation to build
tasks.buildPlugin.dependsOn(validatePluginForProduction)